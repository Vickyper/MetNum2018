%Cantidad de puntos deseados
p=200;
%Arreglos para u, v, z, donde z va a ser la altura al levantar sobre el paraboloide
%y sería un vector y=(u,v,m,n)
u = zeros(1,p);
v = zeros(1,p);
m = zeros(1,p);
n = zeros(1,p);
z = zeros(1,p);
%Valores iniciales 
u(1) = -400;
v(1) = -400;
m(1) = 1/sqrt(3); 
n(1) = 1/sqrt(3);
%Avance
h=0.09;
for t=1 : p-1
  u(t+1) = u(t) + h*(m(t) + h*((-2*v(t)*m(t)*n(t))/(1+u(t)*u(t)+v(t)*v(t))));
  v(t+1) = v(t) + h*(n(t) + h*((-2*u(t)*m(t)*n(t))/(1+u(t)*u(t)+v(t)*v(t))));
  m(t+1) = m(t) + h*((((-2)*(v(t) + h*n(t))*(m(t) + h*(((-2).*v(t).*n(t).*m(t))/(1+(u(t).*u(t))+(v(t).*v(t)))))*(n(t) + h*(((-2).*v(t).*n(t).*m(t))/(1+(u(t).*u(t))+(v(t).*v(t))))))     /      (1 + ((u(t) + h*m(t))*(u(t) + h*m(t))) + ((v(t) + h*n(t))*(v(t) + h*n(t))))));
  n(t+1) = n(t) + h*((((-2)*(u(t) + h*m(t))*(m(t) + h*(((-2).*v(t).*n(t).*m(t))/(1+(u(t).*u(t))+(v(t).*v(t)))))*(n(t) + h*(((-2).*v(t).*n(t).*m(t))/(1+(u(t).*u(t))+(v(t).*v(t))))))     /      (1 + ((u(t) + h*m(t))*(u(t) + h*m(t))) + ((v(t) + h*n(t))*(v(t) + h*n(t))))));
  t = t+1;
endfor

for k=1:p
    z(k)=u(k).*v(k);
    k=k+1;
endfor 
%Resolución del paraboloide “ideal” hecho por Octave
fg=@(t,x) [x(3);x(4);-2*((x(2)*x(3)*x(4))/(1 + (x(1)*x(1)) + (x(2)*x(2))));-2*((x(1)*x(3)*x(4))/(1 + (x(1)*x(1)) + (x(2)*x(2))))]; % x(1) := u ; x(2) := v ; x(3) := p ; x(4) := q
x0 = [-400;-400;1/sqrt(3);1/sqrt(3)];
t = [0:h:(p-1)*h];
[t,x] = ode45(fg,t,x0);

  %Calculo del error
%Error_Absoluto_de_u  = 0;
%Error_Absoluto_de_v = 0;
%Norma_ideal = 0;
%for i=1:p
 % Error_Absoluto_de_u  = Error_Absoluto_de_u  + (u(i) - a(i)).*(u(i) - a(i));
 % Error_Absoluto_de_v  = Error_Absoluto_de_v  + (v(i) - a(i)).*(v(i) - a(i));
 % Norma_ideal = Norma_ideal + a(i).*a(i);
%endfor
%Error_Absoluto_de_u  = sqrt(Error_Absoluto_de_u);
%Error_Absoluto_de_v  = sqrt(Error_Absoluto_de_v);
%Norma_ideal = sqrt(Norma_ideal);
%Error_Relativo_de_u = Error_Absoluto_de_u/Norma_ideal;
%Error_Relativo_de_v = Error_Absoluto_de_v/Norma_ideal;
Error_global_u = zeros(1,p);
Error_global_v = zeros(1,p);
Error_global_u(1) = 0;
Error_global_v(1) = 0;
for k = 2 : p 
    Error_global_u(k) = abs(x(k,1) - u(k));
    Error_global_v(k) = abs(x(k,2) - v(k));
endfor

%Graficas
%Esta es la gráfica del paraboloide con la geodésica 
figure(1);
%nuestra solución
plot3(u,v,z,'o'),xlabel('Eje X'),ylabel('Eje Y'),zlabel('Eje Z');
hold on;
  %solución ideal
  plot3(x(:,1),x(:,2),x(:,1).*x(:,2),'r'); %??
  f=[-500:50:500];
  c=f;
  [F,C]=meshgrid(f,c);
  mesh(F,C,F.*C);
%Gráficas de comparación de u y v calculados con u y v "ideales"
 figure(2)
  plot(t,x(:,1),"r-");
  legend("u(s) ideal")
  hold on
  plot(t,u,'b')
  legend("u(s) calculado")
  hold off
  figure(3)
  plot(t,x(:,2),"r-");
  hold on
  plot(t,v,'b')
  legend("v(s) calculado")
  hold off
hold off
  figure(4);
  plot(t,Error_global_u,"o");
  title("Euler hacia Atras (con N-R)");
  legend("Error global en u")
  figure(5)
  plot(t,Error_global_v,"o");
  legend("Error global en v")
  
  Error_por_h_u = zeros(1,20);
l = zeros(1,20);
X=zeros(1,4);
xk=zeros(1,4);
for i=1 : 20
   l(i) = h; % Vector l esta en orden descendente
 for t=1 : p-1
  u(t+1) = u(t) + h*(m(t) + h*((-2*v(t)*m(t)*n(t))/(1+u(t)*u(t)+v(t)*v(t))));
  v(t+1) = v(t) + h*(n(t) + h*((-2*u(t)*m(t)*n(t))/(1+u(t)*u(t)+v(t)*v(t))));
  m(t+1) = m(t) + h*((((-2)*(v(t) + h*n(t))*(m(t) + h*(((-2).*v(t).*n(t).*m(t))/(1+(u(t).*u(t))+(v(t).*v(t)))))*(n(t) + h*(((-2).*v(t).*n(t).*m(t))/(1+(u(t).*u(t))+(v(t).*v(t))))))     /      (1 + ((u(t) + h*m(t))*(u(t) + h*m(t))) + ((v(t) + h*n(t))*(v(t) + h*n(t))))));
  n(t+1) = n(t) + h*((((-2)*(u(t) + h*m(t))*(m(t) + h*(((-2).*v(t).*n(t).*m(t))/(1+(u(t).*u(t))+(v(t).*v(t)))))*(n(t) + h*(((-2).*v(t).*n(t).*m(t))/(1+(u(t).*u(t))+(v(t).*v(t))))))     /      (1 + ((u(t) + h*m(t))*(u(t) + h*m(t))) + ((v(t) + h*n(t))*(v(t) + h*n(t))))));
  t = t+1;
endfor
maximo = 0;
iter = 1;
do
  X=[x(iter,1), x(iter,2), x(iter,3),x(iter,4)];
  xk=[u(iter), v(iter), m(iter), n(iter)];
  if (((X-xk)*(X-xk)') > maximo)
    maximo = sqrt((X-xk)*(X-xk)') ; 
    endif
  iter = iter + 1;
until iter>p
  Error_por_h_u(i) = maximo;
  i= i + 1;
  h= h + (h/7); 
endfor 
w=polyfit(log(l),log(Error_por_h_u),1)
